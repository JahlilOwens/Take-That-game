public int alphaBeta(State state, int depth, int alpha, int beta, boolean maximizingPlayer) {
    if (depth == 0 || isTerminalState(state)) {
        return evaluateState(state);
    }

    if (maximizingPlayer) {
        int maxEval = Integer.MIN_VALUE;
        for (State childState : generateChildren(state)) {
            int eval = alphaBeta(childState, depth - 1, alpha, beta, false);
            maxEval = Math.max(maxEval, eval);
            alpha = Math.max(alpha, eval);
            if (beta <= alpha) {
                break;
            }
        }
        return maxEval;
    } else {
        int minEval = Integer.MAX_VALUE;
        for (State childState : generateChildren(state)) {
            int eval = alphaBeta(childState, depth - 1, alpha, beta, true);
            minEval = Math.min(minEval, eval);
            beta = Math.min(beta, eval);
            if (beta <= alpha) {
                break;
            }
        }
        return minEval;
    }
}


int bestScore = Integer.MIN_VALUE;
State bestMove = null;
for (State move : generateMoves(currentState)) {
    int score = alphaBeta(move, depth, Integer.MIN_VALUE, Integer.MAX_VALUE, true);
    if (score > bestScore) {
        bestScore = score;
        bestMove = move;
    }
}